#include "Arduino.h"
#include <Servo.h>
#include <NMEAGPS.h>
#include <GPSport.h>
#include <Streamers.h>
#include "I2Cdev.h"
#include "PWM.hpp"
#include "Wire.h"
#include <Adafruit_NeoPixel.h>
#include "quaternionFilters.h"
#include "MPU9250.h"
#include <stdio.h>
#define I2Cclock 400000                                 // I2C clock is 400 kilobits/s
#define I2Cport Wire                                    // I2C using Wire library
#define MPU9250_ADDRESS MPU9250_ADDRESS_AD0             // MPU9250 address when ADO = 0 (0x68)  
MPU9250 FCIMU(MPU9250_ADDRESS, I2Cport, I2Cclock);      // Create FCIMU instance using I2C at 400 kilobits/s
static NMEAGPS  gps;
static gps_fix  fix;

float
Mag_x_offset = 395.815,
Mag_y_offset = 256.995,
Mag_z_offset = -195.48499,
Mag_x_scale = 1.1486549,
Mag_y_scale = 1.0514367,
Mag_z_scale = 0.8486538;

#define True_North false                                // change this to "true" for True North                
float Declination = +0.12254;                           // substitute your magnetic declination 

// ----- Processing variables
char InputChar;                                         // incoming characters stored here
bool LinkEstablished = false;                           // receive flag
String OutputString = "";                               // outgoing data string to Processing
bool recievedAltHold;
double recievedAltHoldVal;


int rPitch, rRoll, rHeading;
int roll1, pitch1;

unsigned long time;
unsigned long start_time;
unsigned long gps_old_time;
unsigned long gps_new_time;
unsigned long navLights_old_time;
unsigned long navLights_new_time;
unsigned long servoUpdate_time;
unsigned long servoUpdate_old_time;
unsigned long gsUpdate_old_time;
unsigned long gsUpdate_time;
unsigned long displayUpdate_time;
unsigned long displayUpdate_time_old;



Servo elevator; //4
Servo rudder; //5
Servo throttle; //6
Servo rightAileron; //7
Servo leftAileron; //8
Servo payloadDrop; //9
Servo aux1; //10
Servo aux2; //11

PWM CH1(2); //rudder
PWM CH2(3); //elevator
PWM CH3(18); //throttle
PWM CH4(19); //aileron
int read1; 
int read2;
int read3;
int read4;

float lat, lon, alt;
int sats;
bool homeLocSet = false;

struct GPS {
    double lat;
    double lon;
    double alt;
};


GPS homeLocation = {0,0,0};
GPS currentLocation = {0,0,0};
GPS failsafeLoaction = {39.640848, -103.189278, 1490};
GPS recievedLocation;
bool autoNav = false;
bool altHold = false;




#define OUTPUT_READABLE_YAWPITCHROLL
#define INTERRUPT_PIN 23

#define LED_PIN    22
#define LED_COUNT 15
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

void setup() {


  Serial.begin(115200);   //Debug


  Serial2.begin(57600);    //telemetry unit
  
  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)
  //boot tone
  tone(23, 262, 500);
  delay(100);
  tone(23, 330, 500);
  delay(100);
  tone(23, 392, 750);
  colorWipe(strip.Color(255,   0,   0), 1);

  elevator.attach(4);
  rudder.attach(5);
  throttle.attach(6);
  rightAileron.attach(7);
  leftAileron.attach(8);
  payloadDrop.attach(9);
  aux1.attach(10);
  aux2.attach(11);

  elevator.write(90);
  rudder.write(90);
  delay(1000);

  elevator.write(50);
  rudder.write(50);
  Serial.print("1");
  delay(1000);
  elevator.write(130);
  rudder.write(130);
  delay(1000);
  Serial.print("1");
  elevator.write(90);
  rudder.write(90);
  delay(1000);
  Serial.print("1");

  pinMode(24, INPUT_PULLUP);
  pinMode(26, INPUT_PULLUP);
  pinMode(28, INPUT_PULLUP);


  DEBUG_PORT.print( F("NMEA.INO: started\n") );
  DEBUG_PORT.print( F("  fix object size = ") );
  DEBUG_PORT.println( sizeof(gps.fix()) );
  DEBUG_PORT.print( F("  gps object size = ") );
  DEBUG_PORT.println( sizeof(gps) );
  DEBUG_PORT.println( F("Looking for GPS device on " GPS_PORT_NAME) );

  #ifndef NMEAGPS_RECOGNIZE_ALL
    #error You must define NMEAGPS_RECOGNIZE_ALL in NMEAGPS_cfg.h!
  #endif

  #ifdef NMEAGPS_INTERRUPT_PROCESSING
    #error You must *NOT* define NMEAGPS_INTERRUPT_PROCESSING in NMEAGPS_cfg.h!
  #endif

  #if !defined( NMEAGPS_PARSE_GGA ) & !defined( NMEAGPS_PARSE_GLL ) & \
      !defined( NMEAGPS_PARSE_GSA ) & !defined( NMEAGPS_PARSE_GSV ) & \
      !defined( NMEAGPS_PARSE_RMC ) & !defined( NMEAGPS_PARSE_VTG ) & \
      !defined( NMEAGPS_PARSE_ZDA ) & !defined( NMEAGPS_PARSE_GST )

    DEBUG_PORT.println( F("\nWARNING: No NMEA sentences are enabled: no fix data will be displayed.") );

  #else
    if (gps.merging == NMEAGPS::NO_MERGING) {
      DEBUG_PORT.print  ( F("\nWARNING: displaying data from ") );
      DEBUG_PORT.print  ( gps.string_for( LAST_SENTENCE_IN_INTERVAL ) );
      DEBUG_PORT.print  ( F(" sentences ONLY, and only if ") );
      DEBUG_PORT.print  ( gps.string_for( LAST_SENTENCE_IN_INTERVAL ) );
      DEBUG_PORT.println( F(" is enabled.\n"
                            "  Other sentences may be parsed, but their data will not be displayed.") );
    }
  #endif

  DEBUG_PORT.print  ( F("\nGPS quiet time is assumed to begin after a ") );
  DEBUG_PORT.print  ( gps.string_for( LAST_SENTENCE_IN_INTERVAL ) );
  DEBUG_PORT.println( F(" sentence is received.\n"
                        "  You should confirm this with NMEAorder.ino\n") );

  trace_header( DEBUG_PORT );
  DEBUG_PORT.flush();

  gpsPort.begin( 9600 );




  //MPU 
  Wire.begin();                                         // Start I2C as master
  Wire.setClock(400000);                                // Set I2C clock speed to 400kbs
  digitalWrite(SDA, 0);
  digitalWrite(SCL, 0);
  
  // ----- Look for MPU9250|MPU9255
  byte gyroID = FCIMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
  if (!((gyroID == 0x71) || (gyroID == 0x73))){
    // ------ Failed to connect
    Serial.print(F("WHO_AM_I = "));
    Serial.println(gyroID, HEX);
    Serial.println(F("Could not connect to the MPU9250/MPU9255"));
    Serial.println(F("Communication failed ... program aborted !!"));
    Serial.flush();
    abort();
  }
  else
  {
    // ----- MPU9250|MPU9255 found
    if (gyroID == 0x71) Serial.println(F("WHO_AM_I = 0x71\nMPU9250 is online ..."));
    if (gyroID == 0x73) Serial.println(F("WHO_AM_I = 0x73\nMPU9255 is online ..."));
    Serial.println("");

    // ----- Start by performing self test and reporting values
    FCIMU.MPU9250SelfTest(FCIMU.selfTest);
    Serial.print(F("x-axis self test: acceleration trim within : "));
    Serial.print(FCIMU.selfTest[0], 1); Serial.println("% of factory value");

    Serial.print(F("y-axis self test: acceleration trim within : "));
    Serial.print(FCIMU.selfTest[1], 1); Serial.println("% of factory value");

    Serial.print(F("z-axis self test: acceleration trim within : "));
    Serial.print(FCIMU.selfTest[2], 1); Serial.println("% of factory value");

    Serial.print(F("x-axis self test: gyration trim within : "));
    Serial.print(FCIMU.selfTest[3], 1); Serial.println("% of factory value");

    Serial.print(F("y-axis self test: gyration trim within : "));
    Serial.print(FCIMU.selfTest[4], 1); Serial.println("% of factory value");

    Serial.print(F("z-axis self test: gyration trim within : "));
    Serial.print(FCIMU.selfTest[5], 1); Serial.println("% of factory value");
    Serial.println("");

    Serial.println(F("Place the compass on a level surface"));
    Serial.println(F(""));


    delay(4000);                        // allow time to place the compass in position

    // ----- Calibrate gyro and accelerometers, load biases in bias registers
    //FCIMU.calibrateMPU9250(FCIMU.gyroBias, FCIMU.accelBias);

    // ----- Initialize device for active mode read of accelerometer, gyroscope, and
    //       temperature
    FCIMU.initMPU9250();
    Serial.println(F("MPU9250 initialized for active data mode...."));
    Serial.println("");
  }
  
  // ----- Look for the AK8963 magnetometer
  byte MagID = FCIMU.readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
  if (!(MagID == 0x48))
  {
    // ----- Communication failed, stop here
    Serial.print(F("WHO_AM_I = "));
    Serial.println(MagID, HEX);
    Serial.println(F("Could not connect to the AK8963"));
    Serial.println(F("Communication failed ... program aborted !!"));
    Serial.flush();
    abort();
  }
  else
  {
    // ----- AK8963 found
    Serial.println(F("WHO_AM_I = 0x48\nAK8963 is online ..."));
    Serial.println("");

    // ----- Get factory ASA calibration values
    FCIMU.initAK8963(FCIMU.factoryMagCalibration);

    // ----- Initialize device for active mode read of magnetometer
    Serial.println(F("AK8963 initialized for active data mode...."));
    Serial.println("");

    // ----- Display AK8963 fuse rom values
    Serial.println(F("AK8963 Fuse ROM values: "));
    Serial.print(F("ASAX: "));
    Serial.println(FCIMU.factoryMagCalibration[0], 2);
    Serial.print(F("ASAY: "));
    Serial.println(FCIMU.factoryMagCalibration[1], 2);
    Serial.print(F("ASAZ: "));
    Serial.println(FCIMU.factoryMagCalibration[2], 2);
    Serial.println("");

    // ----- Get correct sensor resolutions (You only need to do this once)
    FCIMU.getAres();      // milli-gravity
    FCIMU.getGres();      // dps
    FCIMU.getMres();      // milli-Gauss 14-bit|16-bit

    // ---- display sensor scale multipliers
    Serial.println(F("Sensor-scale multipliers"));
    Serial.print(F("accel: "));
    Serial.println(FCIMU.aRes, 6);
    Serial.print(F(" gyro: "));
    Serial.println(FCIMU.gRes, 6);
    Serial.print(F("  mag: "));
    Serial.println(FCIMU.mRes, 6);
    Serial.println("");
  }

  FCIMU.magBias[0] = Mag_x_offset;
  FCIMU.magBias[1] = Mag_y_offset;
  FCIMU.magBias[2] = Mag_z_offset;

  // ----- Copy the soft-iron scalefactors
  FCIMU.magScale[0] = Mag_x_scale;
  FCIMU.magScale[1] = Mag_y_scale;
  FCIMU.magScale[2] = Mag_z_scale;

  // ----- Display offsets & scale-factors
  Serial.println("");
  Serial.print("Mag_x_offset = ");
  Serial.println(FCIMU.magBias[0]);
  Serial.print("Mag_y_offset = ");
  Serial.println(FCIMU.magBias[1]);
  Serial.print("Mag_z_offset = ");
  Serial.println(FCIMU.magBias[2]);
  Serial.print("Mag_x_scale = ");
  Serial.println(FCIMU.magScale[0]);
  Serial.print("Mag_y_scale = ");
  Serial.println(FCIMU.magScale[1]);
  Serial.print("Mag_z_scale = ");
  Serial.println(FCIMU.magScale[2]);
  Serial.println("");


  //end mpu  

  CH1.begin(true);
  CH2.begin(true);
  CH3.begin(true);
  CH4.begin(true);



  tone(23, 430, 100);
  delay(400);
  tone(23, 430, 100);

  start_time = millis();

  colorWipe(strip.Color(0,   255,   0), 50);
  strip.setPixelColor(1, strip.Color(255,   0,   0));
  strip.show();


}

int elevatorServoOut =0;
int rudderServoOut =0;
int throttleOut =0;
int LalieronOut =0;
int RaileronOut =0;
int payloadDropOut =0;
int aux1Out =0;
int aux2Out =0;

char gsString[50];
char gpsString[100];
int firstheading = 0;
int startHeading = 0;


void loop() {
  
  recieveGS();

  getGPS();
  refresh_data();  

  int read1 = CH1.getValue();
  int read2 = CH2.getValue();
  int read3 = CH3.getValue();
  int read4 = CH4.getValue();

  displayUpdate_time = millis();
  if (displayUpdate_time - displayUpdate_time_old >= 100){
    display_compass_heading_on_serial_monitor();    // Display compass pitch roll & heading on Serial Monitor (115200 bauds)
    Serial.println();
    roll1 = rRoll;
    pitch1 = rPitch;
        
    Serial.print("\t");
    Serial.print(read1);
    
    Serial.print("\t");
    Serial.print(read2);

    Serial.print("\t");
    Serial.print(read3);

    Serial.print("\t");
    Serial.println(read4);
    //Serial.println("S::100,100,100,100,100,160,100,100");

    displayUpdate_time_old = displayUpdate_time;


  } 

  if(recievedAltHold == true){
    altitudeHold(recievedAltHoldVal);
  }

  

  if (read1 == 0){read1 = 1500;}
  if (read2 == 0){read2 = 1500;}
  if (read4 == 0){read4 = 1500;}

  read1 = map(read1, 1000, 2000, -90, 90);
  read2 = map(read2, 1000, 2000, -90, 90);
  read3 = map(read3, 1000, 2000, 0, 180);
  read4 = map(read4, 1000, 2000, -90, 90);




  
  rRoll = map(roll1, -90, 90, 0, 180);
  rPitch = map(pitch1, -90, 90, 0, 180);

  read3 = constrain(read3, 0, 180);




  LalieronOut = rRoll + read1;
  RaileronOut = rRoll + read1;

  elevatorServoOut = rPitch + read2;

  //if(gsString[2] == '1'){headingHold(true, rHeading);}

  elevator.write(elevatorServoOut);
  rudder.write(rudderServoOut);

  throttle.write(throttleOut);

  leftAileron.write(rRoll);
  rightAileron.write(rRoll);
  payloadDropOut = 1500;
  payloadDrop.writeMicroseconds(payloadDropOut);
  aux1.write(aux1Out);
  aux2.write(aux2Out);
  //delay(16);
  //updateServos();

  transmitGS();

  UAVLights();

  
}

void updateServos(){
  servoUpdate_time = millis();
  if(servoUpdate_time-servoUpdate_old_time >= 20){
    char buf[3];
    Serial.print(F("S::000.000.000.000.000."));
    sprintf(buf, "%03d", elevatorServoOut);
    Serial.print(buf);
    Serial.println(F(".000.000"));
  }
  servoUpdate_old_time = servoUpdate_time;  
  
}


int availableBytes;

void recieveGS(){
  if (Serial2.available()){
    availableBytes = Serial2.available();
    for(int i=0; i<=availableBytes; i++){    
      gsString[i] = '\0';
      gsString[i] = Serial2.read();
    }
    gsString[availableBytes] = '\0';
    Serial.print(gsString);
  }

  if(gsString[0] == '1'){
    locatorBeacon(true);

  }
  else{
    locatorBeacon(false);
  }
  
  if(gsString[2] == '1'){
    if(firstheading == 0){
      startHeading = rHeading;
      firstheading = 1;
    }

    headingHold(true, rHeading, startHeading);
  }
  if(gsString[2] == '0'){
    firstheading = 0;
    startHeading = 0;
    strip.setPixelColor(0, strip.Color(0,255,0));
    strip.show();
  }

}

void transmitGS(){
  gsUpdate_time = millis();
  if(gsUpdate_time - gsUpdate_old_time >= 500){
    //serial print whatever (lat, long, alt, heading, pitch, roll, autonav, manualnav, whatever)
    Serial2.print(F("GPS: "));
    Serial2.print(lat, 8);
    Serial2.print(",");
    Serial2.print(lon, 8);
    Serial2.print(",");
    Serial2.print(alt, 2);
    Serial2.print(",");
    Serial2.print(sats);
    Serial2.print(". Nav: ");
    Serial2.print(rHeading);
    Serial2.print(",");
    Serial2.print(elevatorServoOut);
    Serial2.print(",");
    Serial2.print(rudderServoOut);
    Serial2.print(",");
    Serial2.print(LalieronOut);
    Serial2.print(",");
    Serial2.print(payloadDropOut);


    Serial2.println();
  
    gsUpdate_old_time = gsUpdate_time;
  }


}


void headingHold(bool active, int heading, int priorHeading){


  if (active){
    strip.setPixelColor(0, strip.Color(255,255,0));
    strip.show();
    int autoSteer = 90;

    Serial2.print("heading: ");
    Serial2.print(heading);
    Serial2.print(" priorHeading: ");
    Serial2.println(priorHeading);

    float turn = heading - priorHeading;
    while (turn < -180) turn += 360;
    while (turn >  180) turn -= 360;

    autoSteer = map(turn, 180, -180, 0, 180);
    autoSteer = constrain(autoSteer, 40, 140);

    rudderServoOut = autoSteer;
    // Serial2.println(rudderServoOut);



    
  }

}

void altitudeHold(double setpoint){
  int currentAlt = currentLocation.alt;
  int distance = setpoint - currentAlt;
  if(distance > 0){
    //going up
    //since gps poll is like 100millis and dont want to snap wings, not big of an incline
    #define maxIncline 20 //degrees
    if (distance < 10){
      //maxincline/2 to not cause so much of an oscillation
      rPitch = rPitch - (maxIncline/2);

    }
    else{
      rPitch = rPitch -maxIncline;
    }



  }
  if(distance < 0){
    //going down
        #define maxIncline 20 //degrees
    if (distance > -10){
      //maxincline/2 to not cause so much of an oscillation
      rPitch = rPitch + (maxIncline/2);

    }
    else{
      rPitch = rPitch + maxIncline;
    }
  }

}

//GPS shit

void getGPS(){
  GPSloop();
  if (fix.valid.location) {

    lat = fix.latitude();
    lon = fix.longitude();
    alt = fix.altitude();
    sats = fix.satellites;

    currentLocation.lat = lat;
    currentLocation.lon = lon;
    currentLocation.alt = alt;

    if(homeLocSet == false){
      homeLocation.lat = lat;
      homeLocation.lon = lon;
      homeLocation.alt = alt;
      homeLocSet = true;
    }
    


    //Serial.println(lat, 20);
  }
  if(lat == 0 || lon == 0 || alt == 0 || sats == 0){
      strip.setPixelColor(0, strip.Color(255,0,0));
      strip.setPixelColor(2, strip.Color(255,0,0));
      strip.setPixelColor(3, strip.Color(255,0,0));
      strip.setPixelColor(5, strip.Color(255,0,0));
      strip.setPixelColor(6, strip.Color(255,0,0));
      strip.setPixelColor(8, strip.Color(255,0,0));
      strip.setPixelColor(9, strip.Color(255,0,0));
      strip.setPixelColor(11, strip.Color(255,0,0));
      strip.setPixelColor(12, strip.Color(255,0,0));
      strip.setPixelColor(13, strip.Color(255,0,0));
      strip.setPixelColor(14, strip.Color(255,0,0));
      strip.show();


    }
    else{
      strip.setPixelColor(0, strip.Color(0,255,0));
      strip.setPixelColor(2, strip.Color(0,255,0));
      strip.setPixelColor(3, strip.Color(0,255,0));
      strip.setPixelColor(5, strip.Color(0,255,0));
      strip.setPixelColor(6, strip.Color(0,255,0));
      strip.setPixelColor(8, strip.Color(0,255,0));
      strip.setPixelColor(9, strip.Color(0,255,0));
      strip.setPixelColor(11, strip.Color(0,255,0));
      strip.setPixelColor(12, strip.Color(0,255,0));
      strip.setPixelColor(13, strip.Color(0,255,0));
      strip.setPixelColor(14, strip.Color(0,255,0));
      strip.show();
    }
  //Serial read

  //Parse

  //Store data

}

static void GPSloop()
{
  while (gps.available( gpsPort )) {
    fix = gps.read();
    doSomeWork();
  }

} // GPSloop

static void doSomeWork()
{
  // Print all the things!

  trace_all( DEBUG_PORT, gps, fix );

} // doSomeWork



void APRSTransmit(){
  //for later development
}


void autoWaypointNav(double targetLat, double targetLon){
  
}

//void logString(char Rdata(50)){
  //write rdata to new line on sd card
//}

void autoTakeoff(){
  //read accel _ for pulse larger than _, if detected, throw motor 75% and gain altitude to 100 at 20degree pitch
}

void locatorBeacon(bool active){
  //needed? buzzer fluctuate tone from 50 hz to 1000 hz
  if (active){
    
    for (int i = 1000; i <= 2000; i++) {
      tone(23, i, 10);
      delay(1);
    }
    tone(12, 1000, 100);

  }
  else{
    noTone(12);
  }

}

void UAVLights(){
  navLights_new_time = millis();
  if (navLights_new_time - navLights_old_time >= 1000){
    strip.setPixelColor(1, strip.Color(0,0,255));
    strip.setPixelColor(4, strip.Color(0,0,255));
    strip.setPixelColor(7, strip.Color(0,0,255));
    strip.setPixelColor(10, strip.Color(0,0,255));


    strip.show();
    navLights_old_time = navLights_new_time;
  }
  else if (navLights_new_time - navLights_old_time <= 100){
    strip.setPixelColor(1, strip.Color(0,0,255));
    strip.setPixelColor(4, strip.Color(0,0,255));
    strip.setPixelColor(7, strip.Color(0,0,255));
    strip.setPixelColor(10, strip.Color(0,0,255));

    strip.show();
  }
  
  else{
    strip.setPixelColor(1, strip.Color(0,0,0));
    strip.setPixelColor(4, strip.Color(0,0,0));
    strip.setPixelColor(7, strip.Color(0,0,0));
    strip.setPixelColor(10, strip.Color(0,0,0));


    strip.show();
  }
}

void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

void refresh_data()
{
  // ----- Poll the MPU9250 interrupt status in I2C mode
  if (FCIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
  {
    // ----- Read the accelerometer x|y|z register values
    FCIMU.readAccelData(FCIMU.accelCount);                                  // Read accelerometer register values

    // ----- Now we'll calculate the acceleration value into actual g's
    //       This depends on scale being set
    FCIMU.ax = (float)FCIMU.accelCount[0] * FCIMU.aRes;                     // Convert raw register value to milli-Gauss
    FCIMU.ay = (float)FCIMU.accelCount[1] * FCIMU.aRes;                     // Convert raw register value to milli-Gauss
    FCIMU.az = (float)FCIMU.accelCount[2] * FCIMU.aRes;                     // Convert raw register value to milli-Gauss

    // ----- Read the gyro x|y|z register values
    FCIMU.readGyroData(FCIMU.gyroCount);                                    // Read gyro register values

    // ----- Calculate the gyro value into actual degrees per second
    //       This depends on scale being set
    FCIMU.gx = (float)FCIMU.gyroCount[0] * FCIMU.gRes;                      // Convert raw register value to dps  <-+   plus -ve sign for positive pitch
    FCIMU.gy = (float)FCIMU.gyroCount[1] * FCIMU.gRes;                      // Convert raw register value to dps  <-+--- gx & gy interchanged
    FCIMU.gz = (float)FCIMU.gyroCount[2] * FCIMU.gRes;                      // Convert raw register value to dps <----- applied -ve sign for CW rotation

    // Read the magnetometer x|y|z register values
    FCIMU.readMagData(FCIMU.magCount);                                      // Read magnetometer register values

    // ----- Calculate the magnetometer values in milliGauss and  apply
    //       the ASA fuse ROM values and milli-Gauss scale corrections
    //       The MPU92590 magnetometer uses the 14-bit scale-correction of 0.6
    FCIMU.mx = (float)FCIMU.magCount[0] * FCIMU.mRes * FCIMU.factoryMagCalibration[0] - FCIMU.magBias[0];   // Convert/correct raw register value to milli-Gauss
    FCIMU.my = (float)FCIMU.magCount[1] * FCIMU.mRes * FCIMU.factoryMagCalibration[1] - FCIMU.magBias[1];   // Convert/correct raw register value to milli-Gauss
    FCIMU.mz = (float)FCIMU.magCount[2] * FCIMU.mRes * FCIMU.factoryMagCalibration[2] - FCIMU.magBias[2];   // Convert/correct raw register value to milli-Gauss
  }

  // ----- This library function MUST be called before updating the Mahoney quaternions!
  FCIMU.updateTime();

  /*
     The following quaternion values assume that the MPU-9250 gyro X-axis
     is pointing North and that the gyro Z-axis is pointing upwards.

     These values produce:
      - a clockwise heading of 0..360 degrees if we use the formula "Heading = atan2(FCIMU.mx, FCIMU.my;"
      - q0,q1,q2,q3 values of 1,0,0,0 when the compass is pointing north
  */

  MahonyQuaternionUpdate(  FCIMU.ax,              -FCIMU.ay,              FCIMU.az,
                           FCIMU.gx * DEG_TO_RAD, -FCIMU.gy * DEG_TO_RAD, FCIMU.gz * DEG_TO_RAD,
                           FCIMU.my,              -FCIMU.mx,              -FCIMU.mz,
                           FCIMU.deltat);

  //  MadgwickQuaternionUpdate( FCIMU.ax,              -FCIMU.ay,              FCIMU.az,
  //                            FCIMU.gx * DEG_TO_RAD, -FCIMU.gy * DEG_TO_RAD, FCIMU.gz * DEG_TO_RAD,
  //                            FCIMU.my,              -FCIMU.mx,              -FCIMU.mz,
  //                            FCIMU.deltat);

  // ----- calculate the pitch in degrees using Magwick quaternions
  FCIMU.pitch = asin(2.0f * (*(getQ() + 1) * *(getQ() + 3) - *getQ() * *(getQ() + 2)));

  // ----- calculate the roll in degrees using Magwick quaternions
  FCIMU.roll = -atan2(2.0f * (*getQ() * *(getQ() + 1) + * (getQ() + 2) * *(getQ() + 3)), *getQ() * *getQ() - * (getQ() + 1)
                      * *(getQ() + 1) - * (getQ() + 2) * *(getQ() + 2) + * (getQ() + 3) * *(getQ() + 3));

  // ----- calculate the yaw in degrees using Magwick quaternions
  FCIMU.yaw = atan2(2.0f * (*(getQ() + 1) * *(getQ() + 2) + *getQ() * *(getQ() + 3)), *getQ() * *getQ() + * (getQ() + 1)
                    * *(getQ() + 1) - * (getQ() + 2) * *(getQ() + 2) - * (getQ() + 3) * *(getQ() + 3));
}

void display_compass_heading_on_serial_monitor()
{
  //  // ----- display sample rate (Hz)
  //  Serial.print("rate ");
  //  printNumber((float)FCIMU.sumCount / FCIMU.sum);

  // ----- display quaternions
  Serial.print(" |   q0|qx|qy|qz ");
  Serial.print(*getQ());
  Serial.print(" ");
  Serial.print(*(getQ() + 1));
  Serial.print(" ");
  Serial.print(*(getQ() + 2));
  Serial.print(" ");
  Serial.print(*(getQ() + 3));
  Serial.print(" ");
  

  //  // ----- display accelerometer xyz in milli-gravities (mg)
  //  Serial.print(" |   accel ");
  //  printNumber((short)(FCIMU.ax * 1000));
  //  printNumber((short)(FCIMU.ay * 1000));
  //  printNumber((short)(FCIMU.az * 1000));

  //  // ----- display gyro xyz in degrees/sec (dps)
  //  Serial.print(" |   gyro ");
  //  printNumber((short)(FCIMU.gx));
  //  printNumber((short)(FCIMU.gy));
  //  printNumber((short)(FCIMU.gz));

  //  // ----- display magnetometer xyz in milliGausss (mG)
  //  Serial.print(" |   mag ");
  //  printNumber((short)FCIMU.mx);
  //  printNumber((short)FCIMU.my);
  //  printNumber((short)FCIMU.mz);

  //  // ----- display pitch/roll/yaw in degrees (deg)
  //  Serial.print(" |   p/r/yaw ");
  //  printNumber((short)FCIMU.pitch);
  //  printNumber((short)FCIMU.roll);
  //  float yaw = FCIMU.yaw;
  //  if (yaw > 360.0) yaw -= 360.0;
  //  if (yaw < 0.0) yaw += 360.0;
  //  printNumber((short)yaw);

  //  // ----- display the compass heading in degrees (float)
  //  Serial.print(" |   Heading: ");
  //  printNumber(Heading);

  // ----- display the pitch
  Serial.print(" |   Pitch: ");
  rPitch = (round(FCIMU.pitch * RAD_TO_DEG));

  Serial.print(rPitch);

  // ----- display the roll
  Serial.print(" |   Roll: ");
  rRoll = (round(FCIMU.roll * RAD_TO_DEG));
  Serial.print(rRoll);


  Serial.print(" |   Heading: ");
  float heading = FCIMU.yaw * RAD_TO_DEG;
  if (heading < 0) heading += 360.0;              // Yaw goes negative between 180 amd 360 degrees
  if (True_North == true) heading += Declination; // calculate True North
  if (heading < 0) heading += 360.0; 
  if (heading > 360) heading -= 360.0;
  rHeading = (round(heading));
  Serial.print(rHeading);

}

